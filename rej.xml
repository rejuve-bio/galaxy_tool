<tool id="rej" name="Rejuve" version="0.1.0+galaxy0" python_template_version="3.5" profile="21.05">

    <requirements>
    </requirements>

    <stdio>
        <exit_code range=":-2" level="warning" description="Low disk space" />
        <exit_code range="1:" level="fatal"  />
        <regex match="Error:"  level="fatal" />
    </stdio>

    <command detect_errors="exit_code"><![CDATA[

    python3 '$__tool_directory__/service.py'
    #if $service.select == 'as'
            -query = $service.template 
            #if $service.viz
                -viz
            #end if
    #elif $service.select == 'hg'
        -hg $service.param1 $service.param2
    #elif $service.select == 'nl'
        -prompt $service.prompt
    #end if

    #if $service.select == 'nl'
        >'output_text'
    #else
        >'output_other'
    #end if

    ]]></command>

    <inputs>

        <conditional name="service">

            <param type="select" name="select" label="Service">
                    <option value="as">Query Builder</option>
                    <option value="nl">Prompt</option>
                    <option value="hg">Hypothesis</option>
            </param>

            <when value="nl">
                <param type="text" format="data" name="prompt" label="Enter your prompt" />
            </when>


            <when value="as">

                <param type="select" name="template" label="Pick a template">
                        <option value="viz">Use a visualizer</option>
                        <option value='gwas'>Find all GWAS variants of a gene that are located in enhancers and identify the associated genes of these enhancers</option>
                        <option value='gtp'>Find a gene, its transcript, and the associated protein, establishing relationships of transcription and translation.</option>
                        <option value='pctp'>Find a protein-coding gene, its transcript, and the associated protein (ANKE1), establishing a transcription relationship from the gene to the transcript.</option>
                </param>

                <param name="viz" checked="true" type="boolean" label="Visualize first"/>
                <param name="tabular" checked="true" truevalue="true" falsevalue="false" type="boolean" label="Get tabular output"/>
        
            </when>

            <when value="hg">

                <param optional="false" type="text" name="param1" label="SNV or Indel "/>
                <param optional="false" type="text" name="param2" label="Phenotype/ Triat"/>

                <param name="tabular" checked="true" truevalue="true" falsevalue="false" type="boolean" label="Get tabular output"/>

            
            </when>

        </conditional> 

    </inputs>

    <outputs>

        <data name="output_text" format="txt" label="${tool.name} | service: ${service['select']} | txt">
            <filter>service['select'] == "nl"</filter>
        </data>

        <data name="output_other" format="json" label="${tool.name} | service: ${service['select']} | json or table">
            <filter>service['select'] != "nl"</filter>
            <change_format>
                <when input="tabular" value="true" format="tabular"/>
            </change_format>
        </data>

    </outputs>
    <tests>
    <test expect_num_outputs="1">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <conditional name="service">
            <param name="select" value="as"/>
            <param name="template" value="viz"/>
            <param name="viz" value="true"/>
            <param name="tabular" value="true"/>
        </conditional>
        <output name="output_text">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
        <output name="output_other">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
    </test>
    
    <test expect_num_outputs="1">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <conditional name="service">
            <param name="select" value="nl"/>
            <param name="prompt" value=""/>
        </conditional>
        <output name="output_text">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
        <output name="output_other">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
    </test>
    
    <test expect_num_outputs="1">
        <!--TODO: auto-generated test case. Please fill in the required values-->
        <conditional name="service">
            <param name="select" value="hg"/>
            <param name="param1" value=""/>
            <param name="param2" value=""/>
            <param name="tabular" value="true"/>
        </conditional>
        <output name="output_text">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
        <output name="output_other">
            <assert_contents>
                <has_text text=""/>
                <has_line line=""/>
                <has_line_matching expression=""/>
            </assert_contents>
        </output>
    </test>
    
    </tests>



    <help><![CDATA[
    
        **What does this tool do?**
        
        **Services/Inputs**
        
        1. Natural Language
        
        2. Use a visualizer to build a query or select from templates
        
        3. JSON file
        
        **Output**
        
        JSON format  
        
        .. class:: infomark
        
        **TIP:** **Steps to Initialize the Visualizer**
        
        **Step 1**: Choose the Query Builder as a service
        
        **Step 2**: Select the Initialize the Visualizer option
        
        **Step 3**: Run the tool; this will load a JSON file into the history, which you can use in the query builder
        
        **Step 4**: Choose the "visualize" option in the history
        
        **Step 5**: Open the visualizer with the name "QB"
        
        This will start the visualizer, which you can use to build queries. Running it in this tool will provide the output in JSON format.
    
    ]]></help>
    
    <citations>
        <citation type="bibtex">
            @UNPUBLISHED{spond,
                    author = "Sergei Kosakovsky Pond",
                    title = "HyPhy: Hypothesis Testing using Phylogenies",
                    year = "2000",
                    note = "http://hyphy.org/",
                    url = "http://hyphy.org/"}
        </citation>
    </citations>

    <!-- <citations>
        <citation type="doi">

        </citation>
    </citations> -->

</tool>